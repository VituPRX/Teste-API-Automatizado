{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2022-10-17T13:17:48.970Z",
    "end": "2022-10-17T13:17:49.364Z",
    "duration": 394,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7ed9d95c-6de1-4f10-8f0e-230e119c488c",
      "title": "",
      "fullFile": "cypress/integration/produtos.spec.js",
      "file": "cypress/integration/produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "75ecba34-67c7-442b-8742-e65bf94c7ba4",
          "title": "Teste da funcionalidade produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Teste da funcionalidade produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "816e560d-d3ba-4320-9bc8-29e915ca2dcc",
              "parentUUID": "75ecba34-67c7-442b-8742-e65bf94c7ba4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Listar produtos",
              "fullTitle": "Teste da funcionalidade produtos Listar produtos",
              "timedOut": null,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'produtos'\n}).then(response => {\n  //expect(response.body.produtos[10].nome).to.equal('Capa de celular')\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(30);\n});",
              "err": {},
              "uuid": "f55db399-01e4-489f-a72c-0789f0e0e356",
              "parentUUID": "75ecba34-67c7-442b-8742-e65bf94c7ba4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastrar produto",
              "fullTitle": "Teste da funcionalidade produtos Cadastrar produto",
              "timedOut": null,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC = ${Math.floor(Math.random() * 100000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 200,\n    \"descricao\": \"new product\",\n    \"quantidade\": 1000\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "0e15c679-204a-468e-b5e4-d9aa54605a40",
              "parentUUID": "75ecba34-67c7-442b-8742-e65bf94c7ba4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Teste da funcionalidade produtos Deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, \"Produto EBAC = 81080519\", 250, \"descricao do produto novo\", 180).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "1130ba73-69dd-45a4-897a-31556f549068",
              "parentUUID": "75ecba34-67c7-442b-8742-e65bf94c7ba4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto ja cadastrado",
              "fullTitle": "Teste da funcionalidade produtos Deve editar um produto ja cadastrado",
              "timedOut": null,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Produto EBAC = 42994242\",\n      \"preco\": 200,\n      \"descricao\": \"new product\",\n      \"quantidade\": 1000\n    }\n  });\n}).then(response => {\n  expect(response.body.message).to.equal('Registro alterado com sucesso');\n  expect(response.status).to.equal(200);\n});",
              "err": {},
              "uuid": "e9e78d26-ee60-49e4-89e7-4af98e8a731d",
              "parentUUID": "75ecba34-67c7-442b-8742-e65bf94c7ba4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado previamente",
              "fullTitle": "Teste da funcionalidade produtos Deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC = ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"descricao do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 200,\n      \"descricao\": \"new product\",\n      \"quantidade\": 1000\n    }\n  });\n}).then(response => {\n  expect(response.body.message).to.equal('Registro alterado com sucesso');\n  expect(response.status).to.equal(200);\n});",
              "err": {},
              "uuid": "7e55939e-a638-4e97-9486-bea1fa20033a",
              "parentUUID": "75ecba34-67c7-442b-8742-e65bf94c7ba4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto previamente cadastrado",
              "fullTitle": "Teste da funcionalidade produtos Deve deletar um produto previamente cadastrado",
              "timedOut": null,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC = ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, \"descricao do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "e40c0b74-059c-4311-9521-defc7f4686c5",
              "parentUUID": "75ecba34-67c7-442b-8742-e65bf94c7ba4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "816e560d-d3ba-4320-9bc8-29e915ca2dcc",
            "f55db399-01e4-489f-a72c-0789f0e0e356",
            "0e15c679-204a-468e-b5e4-d9aa54605a40",
            "1130ba73-69dd-45a4-897a-31556f549068",
            "e9e78d26-ee60-49e4-89e7-4af98e8a731d",
            "7e55939e-a638-4e97-9486-bea1fa20033a",
            "e40c0b74-059c-4311-9521-defc7f4686c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 343,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}